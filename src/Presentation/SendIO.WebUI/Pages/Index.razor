@page "/"

@using System.Net.Http.Headers;
@using SendIO.WebUI.Model;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;
@using Blazored.LocalStorage;
@inject Blazored.LocalStorage.ILocalStorageService localStore;

<PageTitle>File Upload</PageTitle>
<EditForm Model=@fileUpload OnSubmit="@SubmitEventHandler">
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Title</label>
        <InputText class="form-control" @bind-Value=fileUpload.title placeholder="optional" />
    </div>
    <div class="mb-3">
        <label for="exampleFormControlTextarea1" class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value=fileUpload.description placeholder="optional" rows="3" />
    </div>

    <div class="mb-3">
        <InputFile class="form-control" type="file" OnChange="@OnChooseFile" multiple />
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-outline-primary" disabled=@upload>@uploadState</button>

    @if (uploadLinkState)
    {
        <div class="card mt-3">
            <div class="card-body">
                <h6 class="card-subtitle mb-2 text-body-secondary">Your share link is ready</h6>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind-value=uploadLink aria-describedby="button-addon2" disabled>
                    <button class="btn btn-outline-primary" @onclick="@linkCopy" type="button" id="button-addon2">Copy</button>
                </div>
            </div>
        </div>

    }


</EditForm>

@code {
    FileUpload fileUpload = new FileUpload();
    EditContext? context;
    InputFileChangeEventArgs? _selectedFile;
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private bool upload = true;
    private string uploadState = "Upload";
    private string uploadLink = "";
    private bool uploadLinkState = false;

    protected override Task OnInitializedAsync()
    {
        context = new EditContext(fileUpload);
        return base.OnInitializedAsync();
    }

    private async void SubmitEventHandler(EditContext context)
    {
        if (context.Validate())
        {
            await SubmitFileAsync();
        }
        else
        {

        }
    }

    public void OnChooseFile(InputFileChangeEventArgs e)
    {
        _selectedFile = e;
        if(e.FileCount > 0)
        {
            upload = false;
    }
        else
        {
            upload = true;
        }
    }


    public async Task SubmitFileAsync()
    {
        uploadState = "Uploading...";
        upload = true;
        using var content = new MultipartFormDataContent();


        foreach (var file in _selectedFile.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(
                content: fileContent,
                fileName: file.Name,
                name: "\"files\""
                );
            content.Add(new StringContent(fileUpload.title ?? ""), "\"title\"");
            content.Add(new StringContent(fileUpload.description ?? ""), "\"description\"");
        }
        var response = await Http.PostAsync("https://localhost:7161/api/FileHead/Upload", content);
        var uploadresult = await response.Content.ReadFromJsonAsync<FileUploadResult>();

        if (uploadresult?.status == "OK")
        {
            clearForm();
            uploadLinkState = true;
            uploadLink = Http.BaseAddress + "share/" + uploadresult.id.ToString();
            await localAdd(DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss tt"),uploadLink);
            StateHasChanged();
        }

    }

    private void clearForm()
    {
        fileUpload = new FileUpload();
        uploadState = "Upload";
        upload = false;
    }

    private async Task CopyTextToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text);
    }

    private async void linkCopy()
    {
        await CopyTextToClipboard(uploadLink);
    }

    private async Task localAdd(string key, string value)
    {
        await localStore.SetItemAsync(key, value);
    }

}