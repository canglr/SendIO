@page "/share/{id:guid}"
@inject HttpClient Http;
@using WebUI.Model;
@using WebUI.Helper;
@inject IJSRuntime JSRuntime;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

<PageTitle>Share</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            @if (shareresult.title != null)
            {
                <h5 class="card-title">@shareresult.title</h5>
            }

            @if (shareresult.description != null)
            {
                <p class="card-text">@shareresult.description</p>
            }



            <ul class="list-group">
                @foreach (var file in shareresult.FileContents)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @file.originalname

                        @if (!_isDeleted)
                        {
                            <button @onclick="@(async () => await getDownload(file.Id,file.originalname,file.size))" class="btn btn-outline-primary btn-sm">Download</button>
                        }
                        else
                        {
                            <button class="btn btn-outline-secondary btn-sm" disabled>Expired</button>
                        }
                    </li>
                }

            </ul>


        </div>
        <div class="card-footer text-body-secondary text-center">
            @if (!_isDeleted)
            {
                <small>will be deleted after @((shareresult.enddate - DateTime.Now).Days) days</small>
            }
            else
            {
                <small>The files were deleted because the connection expired</small>
            }

                
        </div>
    </div>
}


<!-- Modal -->
<div class="modal fade" id="downloadModal" tabindex="-1" aria-labelledby="downloadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="downloadModalLabel">@downloadFileName</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (bool.Parse(Configuration["downloadWarning"]))
                {
                    <div class="alert alert-warning" role="alert">
                        @Configuration["downloadWarningMessage"]
                    </div>
                }

                <a class="btn btn-primary w-100" href="@downloadLink" role="button" download="@downloadFileName">Download Now (@downloadSize)</a>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public Guid id { get; set; }

    private FileHeadResult shareresult = new();

    private bool _loading = true;

    private bool _isDeleted = false;

    private string downloadFileName = "";

    private string downloadLink = "";

    private string downloadSize = "";

    protected async override Task OnInitializedAsync()
    {
        await getShare();
        deleted();
    }

    private async Task getShare()
    {
        var response = await Http.GetAsync(Configuration["api"]+"/api/FileHead/" + id.ToString());
        shareresult = await response.Content.ReadFromJsonAsync<FileHeadResult>();
        _loading = false;
    }

    private async Task getDownload(Guid fileid, string filename, long filesize)
    {
        var response = await Http.GetAsync(Configuration["api"]+"/api/FileHead/Share/" + fileid.ToString());
        var result = await response.Content.ReadFromJsonAsync<FileShareResult>();
        //await JSRuntime.InvokeAsync<string>("downloadFile", result.link);
        downloadLink = result.link;
        downloadFileName = filename;
        downloadSize = Helper.ToSizeString(filesize);
        await getDownloadModal();
    }

    private async Task getDownloadModal()
    {
        await JSRuntime.InvokeAsync<string>("openModal", "#downloadModal");
        StateHasChanged();
    }


    private void deleted()
    {
        if (shareresult.enddate >= DateTime.Now)
        {
            _isDeleted = false;
        }
        else
        {
            _isDeleted = true;
        }
    }



}